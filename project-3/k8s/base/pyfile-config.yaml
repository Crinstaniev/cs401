apiVersion: v1
data:
  pyfile: |
    from collections import deque


    def handler(input: dict, context: object) -> dict[str, any]:
        cpu_percent_keys = [
            key for key in input.keys() if key.startswith("cpu_percent")]
        cpu_percents = [input[key] for key in cpu_percent_keys]

        # environment initialization
        if not context.env.get("cpu_percent_history"):
            context.env['cpu_percent_history'] = deque(
                [cpu_percents for _ in range(10)], maxlen=10)

        if not context.env.get("cpu_percent_ma"):
            context.env['cpu_percent_ma'] = deque(
                [cpu_percents for _ in range(10)], maxlen=10)

        context.env['cpu_percent_history'].append(cpu_percents)

        # calculate moving average for each cpu
        cpu_percent_ma = []
        for i in range(len(cpu_percents)):
            cpu_percent_ma.append(sum(
                [cpu_percent_history[i] for cpu_percent_history in context.env['cpu_percent_history']]) / len(context.env['cpu_percent_history']))

        context.env['cpu_percent_ma'].append(cpu_percent_ma)

        return dict(
            timestamp=input["timestamp"],
            cpu_percent_history=list(context.env['cpu_percent_history']),
            cpu_percent_ma=list(context.env['cpu_percent_ma']),
            cpu_freq_current=input["cpu_freq_current"],
            n_pids=input["n_pids"],
            virtual_memory_used=input["virtual_memory-used"],
            virtual_memory_free=input["virtual_memory-free"],
        )
kind: ConfigMap
metadata:
  creationTimestamp: "2023-03-04T14:18:20Z"
  name: pyfile
  namespace: zz229
  resourceVersion: "5183808"
  uid: 39b2429c-6ed4-4837-b89d-c63bb46da85c
